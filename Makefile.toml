[env]
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = true
CARGO_MAKE_WORKSPACE_INCLUDE_MEMBERS = ["native/workout_ffi"]
ANDROID_PLATFORM_VERSION = "28"
TARGET_OS = "unknown"

DEV = true
RELEASE = false
LIB_OUT_DIR = "debug"

[env.release]
RELEASE = true
DEV = false
LIB_OUT_DIR = "release"

[tasks.init]
dependencies = [ "ensure-global-deps" ]

###############################
# Android
###############################
[tasks.android]
description = "Build emulator android target"
category = "Build"
dependencies = [
    "setup-crate-type-android",
    "pre-android",
    "android-i686",
    "android-i686-release",
    "post-android-i686",
    "post-android"
]

[tasks.android-all]
description = "Build all android targets."
category = "Build"
dependencies = [
    "setup-crate-type-android",
    "pre-android",
    "android-aarch64",
    "android-aarch64-release",
    "post-android-aarch64",
    "android-armv7",
    "android-armv7-release",
    "post-android-armv7",
    "android-i686",
    "android-i686-release",
    "post-android-i686",
    "android-x86_64",
    "android-x86_64-release",
    "post-android-x86_64",
    "post-android"
]

#
# 1. Crate type mods to build for Android and preparing target flutter folders
#

[tasks.pre-android]
description = "Create android/src/main/jniLibs/* folders for each Android platform"
script_runner = "@duckscript"
script = '''
    mkdir ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/packages/${CARGO_MAKE_CRATE_FS_NAME}/android/src/main/jniLibs/arm64-v8a
    mkdir ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/packages/${CARGO_MAKE_CRATE_FS_NAME}/android/src/main/jniLibs/armeabi-v7a
    mkdir ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/packages/${CARGO_MAKE_CRATE_FS_NAME}/android/src/main/jniLibs/x86
    mkdir ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/packages/${CARGO_MAKE_CRATE_FS_NAME}/android/src/main/jniLibs/x86_64
'''

[tasks.setup-crate-type-android]
private = true
env = { TARGET_OS = "android" }
run_task = "setup-crate-type"

[tasks.post-android]
dependencies = ["restore-crate-type"]

#
# 2. Build Android Target(s)
#

[tasks.android-build]
private = true
condition = { env_true = ["DEV"], env_set = ["ANDROID_BUILD_TARGET"] }
command = "cargo"
args = [
  "ndk", 
  "--platform", 
  "${ANDROID_PLATFORM_VERSION}", 
  "--target", 
  "${ANDROID_BUILD_TARGET}", 
  "build",
]

[tasks.android-build-release]
private = true
condition = { env_true = ["RELEASE"], env_set = ["ANDROID_BUILD_TARGET"] }
command = "cargo"
args = [
  "ndk", 
  "--platform", 
  "${ANDROID_PLATFORM_VERSION}", 
  "--target", 
  "${ANDROID_BUILD_TARGET}", 
  "build",
  "--release"
]

[tasks.android-aarch64]
private = true
condition = { env_true = ["DEV"] }
env = { ANDROID_BUILD_TARGET = "arm64-v8a" }
run_task = "android-build"

[tasks.android-armv7]
private = true
condition = { env_true = ["DEV"] }
env = { ANDROID_BUILD_TARGET = "armeabi-v7a" }
run_task = "android-build"

[tasks.android-i686]
private = true
condition = { env_true = ["DEV"] }
env = { ANDROID_BUILD_TARGET = "x86" }
run_task = "android-build"

[tasks.android-x86_64]
private = true
condition = { env_true = ["DEV"] }
env = { ANDROID_BUILD_TARGET = "x86_64" }
run_task = "android-build"

[tasks.android-aarch64-release]
private = true
condition = { env_true = ["RELEASE"] }
env = { ANDROID_BUILD_TARGET = "arm64-v8a" }
run_task = "android-build-release"

[tasks.android-armv7-release]
private = true
condition = { env_true = ["RELEASE"] }
env = { ANDROID_BUILD_TARGET = "armeabi-v7a" }
run_task = "android-build-release"

[tasks.android-i686-release]
private = true
condition = { env_true = ["RELEASE"] }
env = { ANDROID_BUILD_TARGET = "x86" }
run_task = "android-build-release"

  
[tasks.android-x86_64-release]
private = true
condition = { env_true = ["RELEASE"] }
env = { ANDROID_BUILD_TARGET = "x86_64" }
run_task = "android-build-release"

#
# 3. Copy the produced Android *.so lib into android/src/main/jniLibs/* for each platform
#

[tasks.post-android-aarch64]
private = true
env = { ANDROID_TARGET = "aarch64-linux-android", JNI_LIB_DIR = "arm64-v8a" }
run_task = "copy-lib"

[tasks.post-android-armv7]
private = true
env = { ANDROID_TARGET = "armv7-linux-androideabi", JNI_LIB_DIR = "armeabi-v7a" }
run_task = "copy-lib"

[tasks.post-android-i686]
env = { ANDROID_TARGET = "i686-linux-android", JNI_LIB_DIR = "x86" }
run_task = "copy-lib"

[tasks.post-android-x86_64]
private = true
env = { ANDROID_TARGET = "x86_64-linux-android", JNI_LIB_DIR = "x86_64" }
run_task = "copy-lib"

###############################
# IOS
###############################
[tasks.ios]
description = "build iOS targets"
category = "Build"
dependencies = ["ios-build", "ios-release", "post-ios"]

[tasks.ios-build]
condition = { platforms = ["mac"], env_true = ["DEV"] }
description = "Build ios targets."
category = "Build"
command = "cargo"
args = ["lipo"]
dependencies = [
    "setup-crate-type-ios",
]

[tasks.ios-release]
condition = { platforms = ["mac"], env_true = ["RELEASE"] }
description = "Build ios targets."
category = "Build"
command = "cargo"
args = ["lipo", "--release"]
dependencies = [
    "setup-crate-type-ios",
]

[tasks.post-ios]
script_runner = "@duckscript"
condition = { platforms = ["mac"] }
script = [
    """
    cp ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/universal/${LIB_OUT_DIR}/lib${CARGO_MAKE_CRATE_FS_NAME}.a \
    ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/packages/${CARGO_MAKE_CRATE_FS_NAME}/ios/lib${CARGO_MAKE_CRATE_FS_NAME}.a
    """,
    """
    cp ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/native/${CARGO_MAKE_CRATE_CURRENT_WORKSPACE_MEMBER}/binding.h \
    ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/packages/${CARGO_MAKE_CRATE_FS_NAME}/ios/Classes/binding.h
    """,
]
dependencies = ["restore-crate-type"]

[tasks.setup-crate-type-ios]
private = true
env = { TARGET_OS = "ios" }
run_task = "setup-crate-type"

###############################
# MAC OS
###############################
[tasks.macos]
description = "build macos targets"
category = "Build"
dependencies = ["macos-build", "macos-release", "post-macos"]

[tasks.macos-build]
description = "Build macos targets."
condition = { platforms = ["mac"], env_true = ["DEV"] }
env = {  MACOSX_DEPLOYMENT_TARGET= "10.11" }
category = "Build"
command = "cargo"
args = ["build"]
dependencies = [
    "setup-crate-type-macos",
]

[tasks.macos-release]
description = "Build macos targets in release mode."
condition = { platforms = ["mac"], env_true = ["RELEASE"] }
env = {  MACOSX_DEPLOYMENT_TARGET= "10.11" }
category = "Build"
command = "cargo"
args = ["build", "--release"]
dependencies = [
    "setup-crate-type-macos",
]

[tasks.post-macos]
script_runner = "@duckscript"
condition = { platforms = ["mac"] }
script = [
    """
    cp ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/${LIB_OUT_DIR}/lib${CARGO_MAKE_CRATE_FS_NAME}.dylib \
    ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/packages/${CARGO_MAKE_CRATE_FS_NAME}/macos/lib${CARGO_MAKE_CRATE_FS_NAME}.dylib
    """,
    """
    cp ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/native/${CARGO_MAKE_CRATE_CURRENT_WORKSPACE_MEMBER}/binding.h \
    ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/packages/${CARGO_MAKE_CRATE_FS_NAME}/macos/Classes/binding.h
    """,
]
dependencies = ["restore-crate-type"]

[tasks.setup-crate-type-macos]
private = true
env = { TARGET_OS = "macos" }
run_task = "setup-crate-type"


###############################
# Copy Android *.so lib
# - used by all android targets
###############################

[tasks.copy-lib]
private = true
condition = { env_set = ["ANDROID_TARGET", "JNI_LIB_DIR"] }
script_runner = "@duckscript"
script = [
    """
    cp ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/${ANDROID_TARGET}/${LIB_OUT_DIR}/lib${CARGO_MAKE_CRATE_FS_NAME}.so \
    ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/packages/${CARGO_MAKE_CRATE_FS_NAME}/android/src/main/jniLibs/${JNI_LIB_DIR}/lib${CARGO_MAKE_CRATE_FS_NAME}.so
    """,
]


###############################
# Temporary crate type override
# - used both by android, macos and ios targets
###############################

[tasks.setup-crate-type]
private = true
script_runner = "@duckscript"
script = [
    """
    toml = readfile ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/native/${CARGO_MAKE_CRATE_CURRENT_WORKSPACE_MEMBER}/Cargo.toml
    crate_type = set ""
    os = get_env TARGET_OS
    is_android = eq ${os} "android"
    is_ios = eq ${os} "ios"
    is_macos = eq ${os} "macos"
    if ${is_android}
      crate_type = set "cdylib"
    elseif ${is_ios}
      crate_type = set "staticlib"
    elseif ${is_macos}
      crate_type = set "cdylib"
    else
      crate_type = set "rlib"
    end
    val = replace ${toml} "staticlib" ${crate_type}
    result = writefile ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/native/${CARGO_MAKE_CRATE_CURRENT_WORKSPACE_MEMBER}/Cargo.toml ${val}
    assert ${result}
    """,
]

[tasks.restore-crate-type]
private = true
script_runner = "@duckscript"
script = [
    """
    toml = readfile ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/native/${CARGO_MAKE_CRATE_CURRENT_WORKSPACE_MEMBER}/Cargo.toml
    crate_type = set ""
    os = get_env TARGET_OS
    is_android = eq ${os} "android"
    is_ios = eq ${os} "ios"
    if ${is_android}
      crate_type = set "cdylib"
    elseif ${is_ios}
      crate_type = set "staticlib"
    elseif ${is_macos}
      crate_type = set "cdylib"
    else
      crate_type = set "rlib"
    end
    val = replace ${toml} ${crate_type} "staticlib"
    result = writefile ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/native/${CARGO_MAKE_CRATE_CURRENT_WORKSPACE_MEMBER}/Cargo.toml ${val}
    assert ${result}
    """,
]

###############################
# Ensure build tools needed
###############################
[tasks.ensure-global-deps]
private = true
category = "Deps"
dependencies = ["ensure-cbindgen", "ensure-dart-bindgen"]

[tasks.ensure-cbindgen]
private = true
category = "Deps"
command = "cargo"
args = ["install", "cbindgen"]

[tasks.ensure-dart-bindgen]
private = true
category = "Deps"
command = "cargo"
args = ["install", "dart-bindgen", "--features", "cli"]

### The below is more correct, but `exec cargo ...` fails
[tasks.ensure-cargo-global]
private = true
script_runner = "@duckscript"
condition = { env_set = ["CMD", "INSTALL_FLAGS"] }
script = '''
    cmd_path = which ${CMD}
    if is_empty ${cmd_path}
      exec echo cargo install ${CMD} ${INSTALL_FLAGS}
      exec cargo install ${CMD} ${INSTALL_FLAGS}
    else
      exec echo "already installed at ${cmd_path}"
    end
'''

